.TH "/home/clover/Projects/web-server/src/main.c" 3 "Wed Sep 14 2022" "web-server" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/clover/Projects/web-server/src/main.c
.SH SYNOPSIS
.br
.PP
\fC#include <arpa/inet\&.h>\fP
.br
\fC#include <asm\-generic/errno\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <http\-handler\&.h>\fP
.br
\fC#include <netinet/in\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <sys/socket\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBprintErrorAndExit\fP (char *prompt)"
.br
.RI "print error and terminate the process "
.ti -1c
.RI "int \fBmain\fP (void)"
.br
.RI "main function "
.in -1c
.SH "Function Documentation"
.PP 
.SS "int main (void)"

.PP
main function 
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP

.PP
Definition at line \fB32\fP of file \fBmain\&.c\fP\&.
.PP
.nf
32                {
33   int errnum;
34   char receiveBuffer[HTTP_HEADER_LEN] = { 0 };
35   char serverData[HTTP_HEADER_LEN] = { 0 };
36   int serverSocket = socket(AF_INET, SOCK_STREAM, 0);
37   if (serverSocket == -1) printErrorAndExit("web-server");
38 
39   struct sockaddr_in serverAddress = {
40     \&.sin_family = AF_INET,
41     \&.sin_port = htons(3240),          /* connect with HTTP protocol */
42     \&.sin_addr\&.s_addr = INADDR_ANY,
43   };
44 
45   int bindStatus = bind(serverSocket,
46                         (struct sockaddr *) &serverAddress,
47                         sizeof(serverAddress));
48   if (bindStatus == -1) printErrorAndExit("web-server");
49 
50 
51   int listenStatus = listen(serverSocket, 5);
52   if (listenStatus == -1) printErrorAndExit("web-server");
53 
54   while (1) {
55     int clientSocket;
56     clientSocket = accept(serverSocket,
57         (struct sockaddr *) NULL,
58         NULL);
59     if (clientSocket == -1) printErrorAndExit("web-server");
60 
61     int messageSize = read(clientSocket, receiveBuffer, HTTP_HEADER_LEN-1);
62     if (messageSize < 0) printErrorAndExit("web-server");
63     receiveBuffer[messageSize-1] = '\0';  /* Null terminate the received string */
64 
65     char responseMessage[HTTP_HEADER_LEN] = { 0 };
66     int handler = handleHTTPClientRequest(messageSize-1, receiveBuffer, HTTP_HEADER_LEN, responseMessage);
67     if (handler == -1) printErrorAndExit("web-server");
68 
69     snprintf(serverData, sizeof(serverData), "%s", responseMessage);
70     int responseStatus = write(clientSocket, &serverData, strlen(serverData));
71     if (responseStatus == -1) printErrorAndExit("web-server");
72 
73     close(clientSocket);
74   }
75   close(serverSocket);
76 
77   return EXIT_SUCCESS;
78 }
.fi
.PP
References \fBhandleHTTPClientRequest()\fP, \fBHTTP_HEADER_LEN\fP, and \fBprintErrorAndExit()\fP\&.
.SS "void printErrorAndExit (char * prompt)"

.PP
print error and terminate the process Print error status of the process based on \fIerrno\fP set, and then terminate the process right after, with \fIEXIT_FAILURE\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIprompt\fP Brief string that should be displayed before the error message, typically the process name 
.RE
.PP

.PP
Definition at line \fB23\fP of file \fBmain\&.c\fP\&.
.PP
.nf
23                                      {
24   perror(prompt);
25   exit(EXIT_FAILURE);
26 }
.fi
.PP
Referenced by \fBmain()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for web-server from the source code\&.
