.TH "/home/clover/Projects/web-server/src/main.c" 3 "Thu Sep 15 2022" "web-server" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/clover/Projects/web-server/src/main.c
.SH SYNOPSIS
.br
.PP
\fC#include <arpa/inet\&.h>\fP
.br
\fC#include <asm\-generic/errno\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <http\-handler\&.h>\fP
.br
\fC#include <netinet/in\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <sys/socket\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBprintErrorAndExit\fP (char *prompt)"
.br
.RI "print error and terminate the process "
.ti -1c
.RI "int \fBmain\fP (void)"
.br
.RI "main function "
.in -1c
.SH "Function Documentation"
.PP 
.SS "int main (void)"

.PP
main function 
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP

.PP
Definition at line \fB32\fP of file \fBmain\&.c\fP\&.
.PP
.nf
32                {
33   int errnum;
34   char receiveBuffer[HTTP_HEADER_LEN] = { 0 };
35   char serverData[HTTP_HEADER_LEN] = { 0 };
36   int serverSocket = socket(AF_INET, SOCK_STREAM, 0);
37 
38   if (serverSocket == -1) {
39     printErrorAndExit("web-server");
40   }
41 
42   struct sockaddr_in serverAddress = {
43     \&.sin_family = AF_INET,
44     \&.sin_port = htons(80),          /* connect with HTTP protocol */
45     \&.sin_addr\&.s_addr = INADDR_ANY,
46   };
47 
48   int bindStatus = bind(serverSocket,
49                         (struct sockaddr*) &serverAddress,
50                         sizeof(serverAddress));
51 
52   if (bindStatus == -1) {
53     printErrorAndExit("web-server");
54   }
55 
56 
57   int listenStatus = listen(serverSocket, 5);
58 
59   if (listenStatus == -1) {
60     printErrorAndExit("web-server");
61   }
62 
63   while (1) {
64     int clientSocket;
65     clientSocket = accept(serverSocket,
66                           (struct sockaddr*) NULL,
67                           NULL);
68 
69     if (clientSocket == -1) {
70       printErrorAndExit("web-server");
71     }
72 
73     int messageSize = read(clientSocket, receiveBuffer, HTTP_HEADER_LEN - 1);
74 
75     if (messageSize < 0) {
76       printErrorAndExit("web-server");
77     }
78 
79     receiveBuffer[messageSize - 1] = '\0'; /* Null terminate the received string */
80 
81     char responseMessage[HTTP_HEADER_LEN] = { 0 };
82     int handler = handleHTTPClientRequest(messageSize - 1, receiveBuffer,
83                                           HTTP_HEADER_LEN, responseMessage);
84 
85     if (handler == -1) {
86       printErrorAndExit("web-server");
87     }
88 
89     snprintf(serverData, sizeof(serverData), "%s", responseMessage);
90     int responseStatus = write(clientSocket, &serverData, strlen(serverData));
91 
92     if (responseStatus == -1) {
93       printErrorAndExit("web-server");
94     }
95 
96     close(clientSocket);
97   }
98 
99   close(serverSocket);
100 
101   return EXIT_SUCCESS;
102 }
.fi
.PP
References \fBhandleHTTPClientRequest()\fP, \fBHTTP_HEADER_LEN\fP, and \fBprintErrorAndExit()\fP\&.
.SS "void printErrorAndExit (char * prompt)"

.PP
print error and terminate the process Print error status of the process based on \fIerrno\fP set, and then terminate the process right after, with \fIEXIT_FAILURE\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIprompt\fP Brief string that should be displayed before the error message, typically the process name 
.RE
.PP

.PP
Definition at line \fB23\fP of file \fBmain\&.c\fP\&.
.PP
.nf
23                                      {
24   perror(prompt);
25   exit(EXIT_FAILURE);
26 }
.fi
.PP
Referenced by \fBmain()\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for web-server from the source code\&.
